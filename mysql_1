-- Create the database
CREATE DATABASE ecommerce;
-- Use the ecommerce database
USE ecommerce;

-- Create customers table
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    address VARCHAR(255)
);
-- Create orders table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);
-- Create products table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    description TEXT
);
-- Create items table
CREATE TABLE items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);


-- Insert data into customers table
INSERT INTO customers (name, email, address) VALUES
('Anjali', 'anajli@gmail.com', '123 abc'),
('Rahul', 'rahul@gmail.com', '456 def'),
('Seema', 'seema@gmail.com', '789 ghi');
-- Insert data into products table
INSERT INTO products (name, price, description) VALUES
('Product A', 25.00, 'Description_Product A'),
('Product B', 30.00, 'Description_Product B'),
('Product C', 40.00, 'Description_Product C');
-- Insert data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2024-10-01', 75.00),
(2, '2024-10-05', 175.00),
(3, '2024-08-25', 50.00);
-- Insert data into orders items table
INSERT INTO items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 25.00),  
(1, 3, 1, 40.00),  
(2, 2, 5, 30.00), 
(3, 1, 1, 25.00);  



-- 1. Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT c.*
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- 2. Get the total amount of all orders placed by each customer
SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;

-- 3. Update the price of Product C to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- 4. Add a new column "discount" to the products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

-- 5. Retrieve the top 3 products with the highest price
SELECT *
FROM products
ORDER BY price DESC
LIMIT 3;

-- 6. Get the names of customers who have ordered Product A
SELECT DISTINCT name
FROM customers
WHERE id IN (
    SELECT o.customer_id
    FROM orders o
    JOIN items oi ON o.id = oi.order_id
    JOIN products p ON oi.product_id = p.id
    WHERE p.name = 'Product A'
);

-- 7. Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT c.name, o.order_date
FROM customers c
JOIN orders o ON c.id = o.customer_id;

-- 8. Retrieve the orders with a total amount greater than 150.00
SELECT *
FROM orders
WHERE total_amount > 150.00;

-- 9. Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table

-- Create order_items table
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Example of inserting data into order_items
INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 3, 22.00),  
(1, 2, 1, 30.00),  
(2, 3, 4, 35.00),  
(3, 1, 2, 25.00),  
(3, 3, 1, 40.00);  

-- 10. Retrieve the average total of all orders
SELECT AVG(total_amount) AS average_order_total
FROM orders;

